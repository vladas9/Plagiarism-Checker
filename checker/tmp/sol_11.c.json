[
"struct {\n  BuffList *buffList;\n  const char *fileName;\n  unsigned int treeLevel;\n}",
"void addSnippet(BuffList *bl, char *code, const char *name) {\n  Buff *buff = makeBuff(code, name);\n  pushBuff(bl, buff);\n}",
"int cursorIsValid(enum CXCursorKind cursorKind) {\n  switch (cursorKind) {\n  case CXCursor_FunctionDecl:\n  case CXCursor_StructDecl:\n  case CXCursor_EnumDecl:\n    return 1;\n  default:\n    return 0;\n  }\n}",
"enum CXChildVisitResult visitorTxt(CXCursor cursor, CXCursor parent,\n                                   CXClientData client_data) {\n  enum CXCursorKind cursorKind = clang_getCursorKind(cursor);\n\n  if (cursorIsValid(cursorKind)) {\n    CXCursor bodyCursor = clang_getCursorDefinition(cursor);\n    CXString name = clang_getCursorSpelling(cursor);\n\n    if (!clang_Cursor_isNull(bodyCursor)) {\n      VisitorData *vData = (VisitorData *)client_data;\n      BuffList *buffList = vData->buffList;\n      const char *origFileName = vData->fileName;\n\n      CXSourceRange range = clang_getCursorExtent(bodyCursor);\n      CXSourceLocation startLoc = clang_getRangeStart(range);\n      CXSourceLocation endLoc = clang_getRangeEnd(range);\n      unsigned int startOffset, endOffset;\n      CXFile file;\n      clang_getExpansionLocation(startLoc, &file, NULL, NULL, &startOffset);\n      clang_getExpansionLocation(endLoc, NULL, NULL, NULL, &endOffset);\n\n      CXString cxFileName = clang_getFileName(file);\n      const char *fileName = clang_getCString(cxFileName);\n      // printf(\"%s\\n\", fileName);\n      if (strcmp(fileName, origFileName) == 0) {\n        FILE *fp = fopen(fileName, \"r\");\n        if (fp) {\n          fseek(fp, startOffset, SEEK_SET);\n          char *code = (char *)malloc(endOffset - startOffset + 1);\n          if (fread(code, 1, endOffset - startOffset, fp) ==\n              endOffset - startOffset) {\n            code[endOffset - startOffset] = '\\0';\n            // printf(\"codeblock:\\n%s\\n\", code);\n            addSnippet(buffList, code, clang_getCString(name));\n          }\n          // free(code);\n          fclose(fp);\n        }\n      }\n      clang_disposeString(cxFileName);\n      clang_disposeString(name);\n    }\n    return CXChildVisit_Recurse;\n  }\n  return CXChildVisit_Continue;\n}",
"const char *getCursorKindName(enum CXCursorKind cursorKind) {\n  CXString kindName = clang_getCursorKindSpelling(cursorKind);\n  const char *result = clang_getCString(kindName);\n\n  clang_disposeString(kindName);\n  return result;\n}",
"enum CXChildVisitResult visitorAstBlock(CXCursor cursor, CXCursor parent,\n                                        CXClientData clientData) {\n  CXSourceLocation location = clang_getCursorLocation(cursor);\n  if (clang_Location_isFromMainFile(location) == 0)\n    return CXChildVisit_Continue;\n\n  enum CXCursorKind cursorKind = clang_getCursorKind(cursor);\n\n  VisitorData *visitorData = (VisitorData *)clientData;\n\n  CXString cursorSpelling = clang_getCursorSpelling(cursor);\n  const char *cursorSpellingStr = clang_getCString(cursorSpelling);\n\n  for (int z = 0; z < visitorData->treeLevel; z++)\n    printf(\"-\");\n  printf(\"%s: %s\\n\", getCursorKindName(cursorKind),\n         cursorSpellingStr ? cursorSpellingStr : \"Unknown\");\n\n  clang_disposeString(cursorSpelling);\n\n  visitorData->treeLevel++;\n  clang_visitChildren(cursor, visitorAstBlock, clientData);\n  visitorData->treeLevel--;\n\n  return CXChildVisit_Continue;\n}",
"enum CXChildVisitResult visitorAst(CXCursor cursor, CXCursor parent,\n                                   CXClientData client_data) {\n  enum CXCursorKind cursorKind = clang_getCursorKind(cursor);\n\n  if (cursorIsValid(cursorKind)) {\n    CXCursor bodyCursor = clang_getCursorDefinition(cursor);\n    CXString name = clang_getCursorSpelling(cursor);\n\n    if (!clang_Cursor_isNull(bodyCursor)) {\n      VisitorData *vData = (VisitorData *)client_data;\n      BuffList *buffList = vData->buffList;\n\n      CXSourceRange range = clang_getCursorExtent(bodyCursor);\n      CXSourceLocation startLoc = clang_getRangeStart(range);\n      CXSourceLocation endLoc = clang_getRangeEnd(range);\n      unsigned int startOffset, endOffset;\n      CXFile file;\n      clang_getExpansionLocation(startLoc, &file, NULL, NULL, &startOffset);\n      clang_getExpansionLocation(endLoc, NULL, NULL, NULL, &endOffset);\n\n      CXString cxFileName = clang_getFileName(file);\n      const char *fileName = clang_getCString(cxFileName);\n\n      if (strcmp(fileName, vData->fileName) == 0) {\n        printf(\"block: \\n\");\n        visitorAstBlock(cursor, parent, client_data);\n      }\n      clang_disposeString(cxFileName);\n      clang_disposeString(name);\n    }\n    return CXChildVisit_Recurse;\n  }\n  return CXChildVisit_Continue;\n}",
"BuffList *parseCodeTxt(const char *filename, int ViewAst) {\n  VisitorData vData;\n  vData.treeLevel = 0;\n  vData.fileName = filename;\n  vData.buffList = makeBuffList();\n\n  CXIndex index = clang_createIndex(0, 0);\n  CXTranslationUnit unit = clang_parseTranslationUnit(\n      index, filename, NULL, 0, NULL, 0, CXTranslationUnit_None);\n\n  if (unit == NULL) {\n    fprintf(stderr, \"Unable to parse translation unit. Quitting.\\n\");\n    clang_disposeIndex(index);\n    return NULL;\n  }\n\n  // Read file content\n  FILE *fp = fopen(filename, \"r\");\n  if (!fp) {\n    perror(\"Failed to open file\");\n    clang_disposeTranslationUnit(unit);\n    clang_disposeIndex(index);\n    return NULL;\n  }\n  fseek(fp, 0, SEEK_END);\n  long fileSize = ftell(fp);\n  rewind(fp);\n  char *fileContent = (char *)malloc(fileSize + 1);\n  fread(fileContent, 1, fileSize, fp);\n  fileContent[fileSize] = '\\0';\n  fclose(fp);\n\n  // Pass VisitorData to the visitor function\n  CXCursor cursor = clang_getTranslationUnitCursor(unit);\n  if (ViewAst)\n    clang_visitChildren(cursor, visitorAst, &vData);\n  else\n    clang_visitChildren(cursor, visitorTxt, &vData);\n\n  // Cleanup\n  free(fileContent);\n  clang_disposeTranslationUnit(unit);\n  clang_disposeIndex(index);\n\n  return vData.buffList;\n}"
]
