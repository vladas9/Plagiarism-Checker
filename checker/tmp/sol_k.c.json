[
"char *read_c_file(const char *filename) {\n  FILE *file = fopen(filename, \"r\");\n  if (file == NULL) {\n    fprintf(stderr, \"Error opening file %s\\n\", filename);\n    return NULL;\n  }\n\n  // Get file size\n  fseek(file, 0, SEEK_END);\n  long size = ftell(file);\n  rewind(file);\n\n  // Allocate memory for file content\n  char *content = (char *)malloc(size + 1);\n  if (content == NULL) {\n    fprintf(stderr, \"Memory allocation error\\n\");\n    fclose(file);\n    return NULL;\n  }\n\n  // Read file content into memory\n  size_t bytesRead = fread(content, sizeof(char), size, file);\n  if (bytesRead != size) {\n    fprintf(stderr, \"Error reading file %s\\n\", filename);\n    fclose(file);\n    free(content);\n    return NULL;\n  }\n\n  // Add null terminator\n  content[size] = '\\0';\n\n  fclose(file);\n  return content;\n}",
"struct Buff {\n  char *dat;\n  ulong len;\n}",
"struct {\n  Buff **buffs;\n  float **dists;\n  uint num;\n}",
"void dbAppend(BuffDB *db, Buff *buff) {\n  db->buffs = realloc(db->buffs, sizeof(Buff *) * (db->num + 1));\n  db->dists = realloc(db->dists, sizeof(float *) * (db->num + 1));\n  for (int i = 0; i < db->num; i++) {\n    db->dists[i] = malloc(sizeof(float) * (db->num + 1));\n  }\n}",
"Buff *makeBuff(char *input) {\n  Buff *buff = malloc(sizeof(Buff));\n  buff->len = strlen(input) + 1;\n  buff->dat = (char *)malloc(buff->len);\n  strcpy(buff->dat, input);\n  return buff;\n}",
"Buff *makeZBuff(Buff *inputBuff) {\n  Buff *buff = malloc(sizeof(Buff));\n  // Compress the input data\n  buff->len = compressBound(inputBuff->len);\n  buff->dat = (char *)malloc(buff->len);\n  compress((Bytef *)buff->dat, &buff->len, (const Bytef *)inputBuff->dat,\n           inputBuff->len);\n  return buff;\n}",
"Buff *catBuffs(Buff *buff1, Buff *buff2) {\n  Buff *result = malloc(sizeof(Buff));\n  result->len = buff1->len + buff2->len - 1;\n  result->dat = malloc(result->len);\n\n  strcpy(result->dat, buff1->dat);\n  strcat(result->dat, buff2->dat);\n\n  return result;\n}",
"Buff *maxBuff(Buff *x, Buff *y) {\n  if (x->len > y->len)\n    return x;\n  return y;\n}",
"Buff *minBuff(Buff *x, Buff *y) {\n  if (x->len < y->len)\n    return x;\n  return y;\n}",
"float normCompDist(Buff *x, Buff *y) {\n  Buff *Cx = makeZBuff(x);\n  Buff *Cy = makeZBuff(y);\n\n  Buff *xy = catBuffs(x, y);\n  Buff *Cxy = makeZBuff(xy);\n\n  float ncd = (float)((float)Cxy->len - (float)minBuff(Cx, Cy)->len) /\n              (float)maxBuff(Cx, Cy)->len;\n  free(xy->dat);\n  free(xy);\n  return ncd;\n}",
"BuffDB *makeDB(uint num, Buff **buffs) {\n  BuffDB *db = malloc(sizeof(BuffDB));\n  db->num = num;\n  db->buffs = buffs;\n  db->dists = malloc(sizeof(float *) * num);\n\n  for (int i = 0; i < num; i++) {\n    db->dists[i] = malloc(sizeof(float) * num);\n    for (int j = 0; j < num; j++) {\n      db->dists[i][j] = normCompDist(buffs[i], buffs[j]);\n    }\n  }\n  for (int i = 0; i < num; i++) {\n    for (int j = i + 1; j < num; j++) {\n      float avg = (db->dists[i][j] + db->dists[j][i]) / 2.0;\n      db->dists[i][j] = avg;\n      db->dists[j][i] = avg;\n    }\n  }\n  return db;\n}",
"void writeDB(FILE *fd, BuffDB *db) {\n  for (int i = 0; i < db->num; i++) {\n    for (int j = 0; j < db->num - 1; j++) {\n      fprintf(fd, \"%f,\", db->dists[i][j]);\n    }\n    fprintf(fd, \"%f\\n\", db->dists[i][db->num - 1]);\n  }\n}",
"Buff **crawl_dir(char *dir_path, int *idx) {\n  DIR *dir;\n  struct dirent *ent;\n\n  if ((dir = opendir(dir_path)) == NULL) {\n    perror(\"Error opening directory\");\n    exit(EXIT_FAILURE);\n  }\n\n  int cap = 10;\n  Buff **list = malloc(sizeof(Buff *) * 10);\n\n  while ((ent = readdir(dir)) != NULL) {\n    if (*idx >= cap) {\n      cap = cap * 2;\n      list = realloc(list, cap * sizeof(Buff *));\n    }\n\n    if (ent->d_type == DT_REG) {\n      char file_path[256];\n      snprintf(file_path, sizeof(file_path), \"%s%s\", dir_path, ent->d_name);\n      if (strstr(ent->d_name, \".c\") != NULL) {\n        list[*idx] = makeBuff(read_c_file(file_path));\n        (*idx)++;\n      }\n    }\n  }\n  closedir(dir);\n  return list;\n}",
"int main() {\n  int num = 0;\n  Buff **progs = crawl_dir(\"./solutions/\", &num);\n  BuffDB *db = makeDB(num, progs);\n\n  writeDB(stdout, db);\n\n  // Free mem.\n  for (int i = 0; i < db->num; i++) {\n    free(progs[i]->dat);\n    free(progs[i]);\n  }\n  for (int i = 0; i < db->num; i++) {\n    free(db->dists[i]);\n  }\n  free(db->dists);\n  free(db);\n\n  return 0;\n}"
]
